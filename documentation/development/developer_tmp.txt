Raw Arrowhead 4.1.3 Core Systems Developer Guide

Contents 

1 Introduction

The objective of the Arrowhead Framework is to efficiently support the development, deployment and
operation of interconnected, cooperative systems. It is based on the Service Oriented Architecture philosophy.
The building elements of the framework are systems that provide and consume services, and
cooperate as systems of systems. Some commonly used systems, such as orchestration, authorization or
service registry are considered as core. These can be used by any system of systems that follow the
guidelines of the Arrowhead Framework.

This document contains the development details of the core systems (Service Registry, Authorization, Orchestrator, Gatekeeper, Gateway, Event Handler and Choreographer for now) of the Arrowhead Framework. These core systems are implemented in Java 11 using the Spring Boot Framework.

Every core system is a web server providing a set of REST web services which can be used by other systems (core systems, producers and consumers) of the cloud and the management tool. The core systems persist their data into a MySQL database.

We assume that the reader are familiar with Java 11 features, the SQL language (and MySQL) and has a basic understanding of the concept of dependency injection on which the Spring Framework are building. In a later chapter we provide a list that contains all the technologies and libraries we used in the implementation of Arrowhead core systems.

2 Getting started



3 Tools

Eclipse
Git (Tortoise Git, SourceTree)
Maven
MySQL Workbench
KeyStore Explorer

4 Used frameworks & libraries

Spring Boot (core, web, security, data JPA)
Hibernate, MySQL connector, MariaDB connector
Jackson
Apache HttpClient
Quartz
JUnit4
Log4j2 (LMAX Disruptor)
Swagger2, Swagger2 UI
Jose4j
JMS Api and Apache ActiveMQ Client

5 DB

6 Maven

7 General structures

8 Modules 

Common

SR

Auth

Orch

GK

GW

EH

Chor



